plugins {
    id 'java'
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'signing'
    id 'maven'
    id 'maven-publish'
    id 'jacoco'
    id "com.diffplug.gradle.spotless"
}

ext {
    // バージョン定義
    versionMajor = 0
    versionMinor = 0
    versionPatch = 4

    // アーティファクト関連
    group 'com.epion-t3'

    version "${versionMajor}.${versionMinor}.${versionPatch}-SNAPSHOT"

    // Document
    siteUrl = 'https://docs.epion-t3.com'

    // Sonatype Repo Urls
    releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
    snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"

    // developper
    developperId = 'takashno'
    developperName = 'Nozomu Takashima'
    developperEmail = 'epion.tropic.test.tool@gmail.com'
}

repositories {
    mavenCentral()
}

dependencies {

    // Json & Yaml
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.6'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.6'
    api group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.6'

    // Java Utils
    api group: 'com.google.guava', name: 'guava', version: '25.1-jre'

    // logging
    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    api group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // cli interface
    api group: 'commons-cli', name: 'commons-cli', version: '1.4'

    // lang
    api group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    // io
    api group: 'commons-io', name: 'commons-io', version: '2.6'

    // Bean Utils
    api group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'

    // Text
    api group: 'org.apache.commons', name: 'commons-text', version: '1.4'

    // BeanValidation
    api group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    api group: 'org.apache.bval', name: 'bval-jsr', version: '1.1.2'

    // Reporting
    api group: 'org.thymeleaf', name: 'thymeleaf', version: '3.0.9.RELEASE'
    api group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-java8time', version: '3.0.1.RELEASE'

    // JSON Path
    api group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'

    // Activity
    api group: 'net.sourceforge.plantuml', name: 'plantuml', version: '8059'

    // XML
    api group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    api group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.0'
    api group: 'javax.activation', name: 'javax.activation-api', version: '1.2.0'

    // For Develop
    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    testCompile 'junit:junit:4.12'

}

// JavaDoc
tasks.withType(Javadoc) {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
    options.addBooleanOption('Xdoclint:none', true)
}

// Java
tasks.withType(JavaCompile) {
    sourceCompatibility = 11
    targetCompatibility = 11
    it.options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

spotless {
    java {
        enforceCheck = true
        licenseHeaderFile rootProject.file('./formatter/LICENSE')
        eclipse().configFile rootProject.file('./formatter/formatter.xml')
        lineEndings 'UNIX'
    }
}

// CodeCov
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination project.file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            from components.java
            pom {
                name = project.name
                description = "epion-t3 core library"
                url = "https://github.com/epion-tropic-test-tool/${project.name}"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = project.developperId
                        name = project.developperName
                        email = project.developperEmail
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/epion-tropic-test-tool/${project.name}.git"
                    developerConnection = "git@github.com:epion-tropic-test-tool/${project.name}.git"
                    url = "https://github.com/epion-tropic-test-tool/${project.name}"
                }
            }
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? project.snapshotsRepoUrl : project.releasesRepoUrl
            def sonatypeUser = project.hasProperty('sonatypeUser') ? project.property('sonatypeUser') : System.getenv('SONATYPE_USER')
            def sonatypePassword = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : System.getenv('SONATYPE_PASSWORD')
            credentials {
                username = sonatypeUser
                password = sonatypePassword
            }
        }
    }
}

signing {
//    def signingKeyId = project.hasProperty('signingKeyId') ? project.property('signingKeyId') : System.getenv('SIGNING_KEYID')
//    def signingKey = project.hasProperty('signingKey') ? project.property('signingKey') : System.getenv('SIGNING_KEY')
//    def signingPassword = project.hasProperty('signingPassword') ? project.property('signingPassword') : System.getenv('SIGNING_PASSWORD')
//    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}